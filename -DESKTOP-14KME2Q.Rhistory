d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c()
j = 1
while (j < nrow(dfUsedInRf) + 1){
if(i!=j){
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if((Xvalue > a)&(Xvalue < b)){
if((Yvalue > c)&(Yvalue < d)){
neighbor.list <- append(neighbor.list, j)
}
}
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
boundaryTibbleDF$rowNumber <- seq(1,nrow(dfUsedInRf),1)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages=c('tidyverse', "dplyr"), .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF %>% dplyr::filter(rowNumber == i) %>%
dplyr::select(-rowNumber)
boundaryTibbleDF.row <- boundaryTibbleDF.row %>% as.matrix()
a <- boundaryTibbleDF.row[1,1] %>% as.numeric()
b <- boundaryTibbleDF.row[1,2] %>% as.numeric()
c <- boundaryTibbleDF.row[1,3] %>% as.numeric()
d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c()
j = 1
while (j < nrow(dfUsedInRf) + 1){
if(i!=j){
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if((Xvalue > a)&(Xvalue < b)){
if((Yvalue > c)&(Yvalue < d)){
#neighbor.list <- append(neighbor.list, j)
}
}
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
?append
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
boundaryTibbleDF$rowNumber <- seq(1,nrow(dfUsedInRf),1)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages=c('tidyverse', "dplyr"), .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF %>% dplyr::filter(rowNumber == i) %>%
dplyr::select(-rowNumber)
boundaryTibbleDF.row <- boundaryTibbleDF.row %>% as.matrix()
a <- boundaryTibbleDF.row[1,1] %>% as.numeric()
b <- boundaryTibbleDF.row[1,2] %>% as.numeric()
c <- boundaryTibbleDF.row[1,3] %>% as.numeric()
d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c()
j = 1
while (j < nrow(dfUsedInRf) + 1){
if(i!=j){
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if((Xvalue > a)&(Xvalue < b)){
if((Yvalue > c)&(Yvalue < d)){
neighbor.list <- base::append(neighbor.list, j)
}
}
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
boundaryTibbleDF$rowNumber <- seq(1,nrow(dfUsedInRf),1)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages=c('tidyverse', "dplyr"), .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF %>% dplyr::filter(rowNumber == i) %>%
dplyr::select(-rowNumber)
boundaryTibbleDF.row <- boundaryTibbleDF.row %>% as.matrix()
a <- boundaryTibbleDF.row[1,1] %>% as.numeric()
b <- boundaryTibbleDF.row[1,2] %>% as.numeric()
c <- boundaryTibbleDF.row[1,3] %>% as.numeric()
d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c(0)
j = 1
while (j < nrow(dfUsedInRf) + 1){
important <- F
if(i!=j){
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if((Xvalue > a)&(Xvalue < b)){
if((Yvalue > c)&(Yvalue < d)){
important <- T
}
}
}
if(important==T){
neighbor.list <- base::append(j, neighbor.list)
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
boundaryTibbleDF$rowNumber <- seq(1,nrow(dfUsedInRf),1)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages=c('tidyverse', "dplyr"), .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF %>% dplyr::filter(rowNumber == i) %>%
dplyr::select(-rowNumber)
boundaryTibbleDF.row <- boundaryTibbleDF.row %>% as.matrix()
a <- boundaryTibbleDF.row[1,1] %>% as.numeric()
b <- boundaryTibbleDF.row[1,2] %>% as.numeric()
c <- boundaryTibbleDF.row[1,3] %>% as.numeric()
d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c(0)
j = 1
while (j < nrow(dfUsedInRf) + 1){
important <- F
if(i!=j){
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if( (Xvalue > a) & (Xvalue < b) ){
if( (Yvalue > c) & (Yvalue < d) ){
important <- T
}
}
}
if(important==T){
neighbor.list <- base::append(j, neighbor.list)
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
boundaryTibbleDF$rowNumber <- seq(1,nrow(dfUsedInRf),1)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages=c('tidyverse', "dplyr"), .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF %>% dplyr::filter(rowNumber == i) %>%
dplyr::select(-rowNumber)
boundaryTibbleDF.row <- boundaryTibbleDF.row %>% as.matrix()
a <- boundaryTibbleDF.row[1,1] %>% as.numeric()
b <- boundaryTibbleDF.row[1,2] %>% as.numeric()
c <- boundaryTibbleDF.row[1,3] %>% as.numeric()
d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c(0)
j = 1
while (j < nrow(dfUsedInRf) + 1){
important <- F
if(i!=j){
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if( (Xvalue > a) & (Xvalue < b) ){
if( (Yvalue > c) & (Yvalue < d) ){ important <- T}
}
}
if(important==T){
neighbor.list <- base::append(j, neighbor.list)
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
boundaryTibbleDF$rowNumber <- seq(1,nrow(dfUsedInRf),1)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages=c('tidyverse', "dplyr"), .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF %>% dplyr::filter(rowNumber == i) %>%
dplyr::select(-rowNumber)
boundaryTibbleDF.row <- boundaryTibbleDF.row %>% as.matrix()
a <- boundaryTibbleDF.row[1,1] %>% as.numeric()
b <- boundaryTibbleDF.row[1,2] %>% as.numeric()
c <- boundaryTibbleDF.row[1,3] %>% as.numeric()
d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c(0)
j = 1
while (j < nrow(dfUsedInRf) + 1){
important <- F
if(i!=j){
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if( (Xvalue > a) & (Xvalue < b) ){
if( (Yvalue > c) & (Yvalue < d) ){
#important <- T
}
}
}
if(important==T){
neighbor.list <- base::append(j, neighbor.list)
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
boundaryTibbleDF$rowNumber <- seq(1,nrow(dfUsedInRf),1)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages=c('tidyverse', "dplyr"), .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF %>% dplyr::filter(rowNumber == i) %>%
dplyr::select(-rowNumber)
boundaryTibbleDF.row <- boundaryTibbleDF.row %>% as.matrix()
a <- boundaryTibbleDF.row[1,1] %>% as.numeric()
b <- boundaryTibbleDF.row[1,2] %>% as.numeric()
c <- boundaryTibbleDF.row[1,3] %>% as.numeric()
d <- boundaryTibbleDF.row[1,4] %>% as.numeric()
neighbor.list <- c(0)
j = 1
while (j < nrow(dfUsedInRf) + 1){
important <- F
first.important <- T
if(i==j){
first.important <- F
}
Xvalue <- dfUsedInRf[j,Xcolname] %>% as.numeric()
Yvalue <- dfUsedInRf[j,Ycolname] %>% as.numeric()
if( (Xvalue > a) & (Xvalue < b) ){
important <- T
}
if( (Yvalue > c) & (Yvalue < d) ){
important <- T
} else {important <- F }
if((important==T) & (first.important==T)){
neighbor.list <- base::append(j, neighbor.list)
}
j = j + 1
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages='tidyverse', .options.snow=opts) %dopar% {
boundaryTibbleDF.row <- boundaryTibbleDF[i,]
neighbor.list <- c()
for(j in seq(1,nrow(dfUsedInRf),1)){
if(i!=j){
if((dfUsedInRf[j,Xcolname]>boundaryTibbleDF.row[1,1])&(dfUsedInRf[j,Xcolname]<boundaryTibbleDF.row[1,2])){
if((dfUsedInRf[j,Ycolname]>boundaryTibbleDF.row[1,3])&(dfUsedInRf[j,Ycolname]<boundaryTibbleDF.row[1,4])){
neighbor.list <- append(neighbor.list, j)
}
}
}
}
neighbor.list <- c(neighbor.list, rep(NA, (fixedLength - length(neighbor.list))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
boundaryTibble[24209,]
data_49[24209,]
data_49[24209,"X"]
seq(1,10,1)
range(1:20)
range(1,20)
?range
neighborOrNot <- function(boundaryTibbleDF, dfUsedInRf, i){
neighbor.list <- c()
boundaryTibbleDF.row <- boundaryTibbleDF[i,]
for(j in seq(1,nrow(dfUsedInRf),1)){
if(j != i){
if((dfUsedInRf[j,Xcolname]>boundaryTibbleDF.row[1,1])&(dfUsedInRf[j,Xcolname]<boundaryTibbleDF.row[1,2])){
if((dfUsedInRf[j,Ycolname]>boundaryTibbleDF.row[1,3])&(dfUsedInRf[j,Ycolname]<boundaryTibbleDF.row[1,4])){
neighbor.list <- append(neighbor.list, j)
}
}
}
}
return(neighbor.list)
}
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
clusterExport(cl, "neighborOrNot")
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages='tidyverse', .options.snow=opts,
, .export = c("neighborOrNot")) %dopar% {
neighbor.list.raw <- neighborOrNot(boundaryTibbleDF, dfUsedInRf, i)
neighbor.list <- c(neighbor.list.raw, rep(NA, (fixedLength - length(neighbor.list.raw))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrNot <- function(boundaryTibbleDF, dfUsedInRf, i){
neighbor.list <- c()
boundaryTibbleDF.row <- boundaryTibbleDF[i,]
for(j in seq(1,nrow(dfUsedInRf),1)){
if(j != i){
if((dfUsedInRf[j,Xcolname]>boundaryTibbleDF.row[1,1])&(dfUsedInRf[j,Xcolname]<boundaryTibbleDF.row[1,2])){
if((dfUsedInRf[j,Ycolname]>boundaryTibbleDF.row[1,3])&(dfUsedInRf[j,Ycolname]<boundaryTibbleDF.row[1,4])){
neighbor.list <- append(neighbor.list, j)
}
}
}
}
return(neighbor.list)
}
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
clusterExport(cl, "neighborOrNot")
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages='tidyverse', .options.snow=opts,
.export = c("neighborOrNot")) %dopar% {
neighbor.list.raw <- neighborOrNot(boundaryTibbleDF, dfUsedInRf, i)
neighbor.list <- c(neighbor.list.raw, rep(NA, (fixedLength - length(neighbor.list.raw))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrNot <- function(boundaryTibbleDF, dfUsedInRf, i, Xcolname, Ycolname){
neighbor.list <- c()
boundaryTibbleDF.row <- boundaryTibbleDF[i,]
for(j in seq(1,nrow(dfUsedInRf),1)){
if(j != i){
if((dfUsedInRf[j,Xcolname]>boundaryTibbleDF.row[1,1])&(dfUsedInRf[j,Xcolname]<boundaryTibbleDF.row[1,2])){
if((dfUsedInRf[j,Ycolname]>boundaryTibbleDF.row[1,3])&(dfUsedInRf[j,Ycolname]<boundaryTibbleDF.row[1,4])){
neighbor.list <- append(neighbor.list, j)
}
}
}
}
return(neighbor.list)
}
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
clusterExport(cl, "neighborOrNot")
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages='tidyverse', .options.snow=opts,
.export = c("neighborOrNot")) %dopar% {
neighbor.list.raw <- neighborOrNot(boundaryTibbleDF, dfUsedInRf, i, Xcolname, Ycolname)
neighbor.list <- c(neighbor.list.raw, rep(NA, (fixedLength - length(neighbor.list.raw))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
clusterExport(cl, "neighborOrNot")
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages='tidyverse', .options.snow=opts,
.export = c("neighborOrNot")) %dopar% {
neighbor.list.raw <- try(neighborOrNot(boundaryTibbleDF, dfUsedInRf, i, Xcolname, Ycolname))
if (class(neighbor.list.raw) == "try-error"){
neighbor.list.raw <- c()
} else {
neighbor.list.raw <-neighbor.list.raw
}
neighbor.list <- c(neighbor.list.raw, rep(NA, (fixedLength - length(neighbor.list.raw))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
clusterExport(cl, "neighborOrNot")
registerDoSNOW(cl)
#opts <- list(progress=progress_fun)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages='tidyverse',
.export = c("neighborOrNot")) %dopar% {
neighbor.list.raw <- neighborOrNot(boundaryTibbleDF, dfUsedInRf, i, Xcolname, Ycolname)
neighbor.list <- c(neighbor.list.raw, rep(NA, (fixedLength - length(neighbor.list.raw))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
seq(24201, 24210, 1) %>% class()
seq(24201, 24210, 1) %>% as.vector() %>%class()
seq(24201, 24210, 1)
neighborOrderList <- function(boundaryTibbleDF, dfUsedInRf, Xcolname, Ycolname, fixedLength, clusterNumber){
boundaryTibbleDF <- boundaryTibbleDF %>% as.data.frame()
dfUsedInRf <- dfUsedInRf[,c(Xcolname, Ycolname)]
cat("Bar:", nrow(dfUsedInRf), " \n")
cl <- makeSOCKcluster(clusterNumber)
clusterExport(cl, "neighborOrNot")
registerDoSNOW(cl)
opts <- list(progress=progress_fun)
df.ouput <-
foreach(i = seq(24201, 24210, 1), .combine = 'rbind',
.packages='tidyverse', .options.snow=opts,
.export = c("neighborOrNot")) %do% {
neighbor.list.raw <- try(neighborOrNot(boundaryTibbleDF, dfUsedInRf, i, Xcolname, Ycolname))
if (class(neighbor.list.raw) == "try-error"){
neighbor.list.raw <- c()
} else {
neighbor.list.raw <-neighbor.list.raw
}
neighbor.list <- c(neighbor.list.raw, rep(NA, (fixedLength - length(neighbor.list.raw))))
}
stopCluster(cl)
return(df.ouput)
}
test <- neighborOrderList(boundaryTibble, data_49, "X", "Y", 400, 10)
